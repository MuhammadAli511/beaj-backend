select * from "wa_lessons_completed" where "courseId" =99 and "phoneNumber"='+923476718155';

select * from "Lesson" where "weekNumber"=3 and "courseId" = 99;


SELECT 
    m."phoneNumber",
    m."name",
    SUM(CASE WHEN s."weekNumber" = 1 THEN 1 ELSE 0 END) AS "week1_activities",
    SUM(CASE WHEN s."weekNumber" = 2 THEN 1 ELSE 0 END) AS "week2_activities",
    SUM(CASE WHEN s."weekNumber" = 3 THEN 1 ELSE 0 END) AS "week3_activities",
    SUM(CASE WHEN s."weekNumber" = 4 THEN 1 ELSE 0 END) AS "week4_activities"
FROM 
    "wa_users_metadata" m
LEFT JOIN 
    "wa_lessons_completed" l 
ON 
    m."phoneNumber" = l."phoneNumber" and l."completionStatus" = 'Completed'
LEFT JOIN 
    "Lesson" s 
ON 
    s."LessonId" = l."lessonId" 
    AND s."courseId" = l."courseId"
	AND s."courseId" = 99
    AND s."weekNumber" IN (1, 2, 3, 4)
WHERE 
    m."targetGroup" = 'T2' 
GROUP BY 
    m."phoneNumber", 
    m."name"
ORDER BY 
    m."phoneNumber" ASC;



select distinct m."phoneNumber", m."name",count(case when (Date(l."startTime") <= '2024-11-22'
and l."completionStatus" = 'Completed') Then 1 else null end)
as "activity_completd", (select count(s."LessonId") from "Lesson" s where s."weekNumber" <= 1 and s."courseId" = 99) as "total_activity",
case when count(case when (Date(l."startTime") <= '2024-11-22' and l."completionStatus" = 'Completed') Then 1 else null end) =
(select count(s."LessonId") from "Lesson" s where s."weekNumber" <= 1  and s."courseId" = 99) then 1 else 0 end as "completion_match"
from "wa_users_metadata" m left join "wa_lessons_completed" l on m."phoneNumber" = l."phoneNumber" and l."courseId" = 99
where m."targetGroup" = 'T2' group by m."name", m."phoneNumber" order by m."phoneNumber" asc;


select m."phoneNumber", m."name", sum(case when s."weekNumber" = 1 then 1 else 0 end) as "week1_activities",
sum(case when s."weekNumber" = 2 then 1 else null end) as "week2_activities",
sum(case when s."weekNumber" = 3 then 1 else null end) as "week3_activities",
sum(case when s."weekNumber" = 4 then 1 else null end) as "week4_activities",
(select count(s1."LessonId") from "Lesson" s1 where s1."weekNumber" = 1 and s1."courseId" = 99) as "total_activity1",
case when sum(case when s."weekNumber" = 1 then 1 else null end) = (select count(s1."LessonId") from "Lesson" s1 where s1."weekNumber" = 1 and s1."courseId" = 99)
then 1 else 0 end as "completion_match1",
case when sum(case when s."weekNumber" = 2 then 1 else null end) = (select count(s1."LessonId") from "Lesson" s1 where s1."weekNumber" = 2 and s1."courseId" = 99)
then 1 else 0 end as "completion_match2",
case when sum(case when s."weekNumber" = 3 then 1 else null end) = (select count(s1."LessonId") from "Lesson" s1 where s1."weekNumber" = 3 and s1."courseId" = 99)
then 1 else 0 end as "completion_match3",
case when sum(case when s."weekNumber" = 4 then 1 else null end) = (select count(s1."LessonId") from "Lesson" s1 where s1."weekNumber" = 4 and s1."courseId" = 99)
then 1 else 0 end as "completion_match4"
from "wa_users_metadata" m left join "wa_lessons_completed" l on m."phoneNumber" = l."phoneNumber" 
and l."completionStatus" = 'Completed' left join "Lesson" s on s."LessonId" = l."lessonId" and s."courseId" = l."courseId" and s."courseId" = 99
and s."weekNumber" IN (1,2,3,4) where m."targetGroup" = 'T2' group by m."name", m."phoneNumber" order by m."phoneNumber" asc;
























select count(*) from "Lesson" where "courseId" = 99 and "weekNumber" <= 2 group by "courseId";

select distinct m."phoneNumber", m."name",count(case when (Date(l."startTime") <= '2024-12-01'
and l."completionStatus" = 'Completed') Then 1 else null end)
as "activity_completd", (select count(s."LessonId") from "Lesson" s where s."weekNumber" <=3 and s."courseId" = 98) as "total_activity",
case when count(case when (Date(l."startTime") <= '2024-12-01' and l."completionStatus" = 'Completed') Then 1 else null end) =
(select count(s."LessonId") from "Lesson" s where s."weekNumber" <=3 and s."courseId" =98) then 1 else 0 end as "completion_match"
from "wa_users_metadata" m left join "wa_lessons_completed" l on m."phoneNumber" = l."phoneNumber" and l."courseId" = 98
where m."targetGroup" = 'T1'
group by m."name", m."phoneNumber" order by m."phoneNumber" asc;


select * from "wa_lessons_completed" where "courseId" = 98 and Date("startTime") <= '2024-11-17' and "phoneNumber" = '+923410219857' ;



select * from "wa_question_responses";

select * from "wa_lessons_completed";


select m."phoneNumber",count(case when q."correct" = 't' then 1 else null end) as "score"
from "wa_users_metadata" m left join "wa_lessons_completed" l on m."phoneNumber" = l."phoneNumber" inner join "wa_question_responses" q on l."phoneNumber" = q."phoneNumber"
where Date(l."startTime") >= '2024-10-26' and Date(l."startTime") <= '2024-10-30' and m."targetGroup" = 'T2' group by m."phoneNumber";

select distinct  from "wa_users_metadata" m left join "wa_lessons_completed" l on m."phoneNumber" = l."phoneNumber" 
where m."targetGroup" = 'T2' ;

select m."phoneNumber",q."correct", count(q."correct" = '{t}') from "wa_users_metadata" m left join "wa_question_responses" q on m."phoneNumber" = q."phoneNumber"
where m."targetGroup" = 'T1'  and Date(q."submissionDate") >= '2024-10-26' and Date(q."submissionDate") <= '2024-10-30' group by m."phoneNumber",q."correct";

SELECT 
    m."phoneNumber",
    COALESCE(array_length(array_positions(q."correct", 't'), 1), 0) AS "score"
FROM 
    "wa_users_metadata" m
LEFT JOIN 
    "wa_lessons_completed" l ON m."phoneNumber" = l."phoneNumber"
INNER JOIN 
    "wa_question_responses" q ON l."phoneNumber" = q."phoneNumber"
WHERE 
    DATE(l."startTime") BETWEEN '2024-10-26' AND '2024-10-30'
    AND m."targetGroup" = 'T2'
GROUP BY 
    m."phoneNumber",q."correct";



SELECT 
    m."phoneNumber",
    COALESCE(array_length(array_positions(q."correct", 't'), 1), 0) AS "score"
FROM 
    "wa_users_metadata" m
LEFT JOIN 
    "wa_lessons_completed" l ON m."phoneNumber" = l."phoneNumber"
LEFT JOIN 
    "wa_question_responses" q ON l."phoneNumber" = q."phoneNumber"
WHERE 
    DATE(l."startTime") BETWEEN '2024-10-26' AND '2024-10-30'
    AND m."targetGroup" = 'T2'
GROUP BY 
    m."phoneNumber",q."correct";

select * from "wa_lessons_completed";
select * from "wa_users_metadata";
select * from "Lesson" where "courseId"= 97 and "weekNumber" = 1;
select * from "Courses";

select * from "Lesson" where "LessonId" = 1265;








select * from "wa_question_responses" where "phoneNumber" = '+923430520947';

select * from "wa_lessons_completed";
select * from "Lesson" where "weekNumber" = 1 and "courseId" = 35;

select m."phoneNumber",count(case when q."correct" = 't' then 1 else null end) as "score"
from "wa_users_metadata" m left join "wa_lessons_completed" l on m."phoneNumber" = l."phoneNumber" inner join "wa_question_responses" q on l."phoneNumber" = q."phoneNumber"
where Date(l."startTime") >= '2024-10-26' and Date(l."startTime") <= '2024-10-30' and m."targetGroup" = 'T2' group by m."phoneNumber";

select distinct * from "wa_users_metadata" m left join "wa_lessons_completed" l on m."phoneNumber" = l."phoneNumber" 
where m."targetGroup" = 'T2' ;

select m."phoneNumber",q."correct", count(q."correct" = '{t}') from "wa_users_metadata" m left join "wa_question_responses" q on m."phoneNumber" = q."phoneNumber"
where m."targetGroup" = 'T1'  and Date(q."submissionDate") >= '2024-10-26' and Date(q."submissionDate") <= '2024-10-30' group by m."phoneNumber",q."correct";

SELECT 
    m."phoneNumber",
    COALESCE(array_length(array_positions(q."correct", 't'), 1), 0) AS "score"
FROM 
    "wa_users_metadata" m
LEFT JOIN 
    "wa_lessons_completed" l ON m."phoneNumber" = l."phoneNumber"
LEFT JOIN 
    "wa_question_responses" q ON l."phoneNumber" = q."phoneNumber"
WHERE 
    DATE(l."startTime") BETWEEN '2024-10-26' AND '2024-10-30'
    AND m."targetGroup" = 'T2'
GROUP BY 
    m."phoneNumber",q."correct";

select * from "Courses";


select * from "wa_users_metadata" m left join "wa_lessons_completed" l on m."phoneNumber" = l."phoneNumber"
inner join "wa_question_responses" q on l."phoneNumber" = q."phoneNumber" and l."lessonId" = q."lessonId" 
where m."targetGroup" = 'T1' and l."courseId" = 95 and l."completionStatus" = 'Completed' ;

select distinct * from "wa_users_metadata" m where m."targetGroup" = 'T2';

select * from "wa_question_responses" where "lessonId" = 1265;



SELECT 
    m."phoneNumber",m."name",
    COALESCE(SUM(array_length(array_positions(q."correct", 't'), 1)), 0) AS "correct_answers_count"
FROM 
    "wa_users_metadata" m
LEFT JOIN 
    "wa_lessons_completed" l 
    ON m."phoneNumber" = l."phoneNumber" 
    AND l."completionStatus" = 'Completed' 
    AND l."courseId" = 95
LEFT JOIN 
    "wa_question_responses" q 
    ON l."phoneNumber" = q."phoneNumber" 
    AND l."lessonId" = q."lessonId"
    AND Date(q."submissionDate") BETWEEN '2024-10-26' AND '2024-10-31'
WHERE 
    m."targetGroup" = 'T1'
GROUP BY 
    m."phoneNumber",m."name"
	ORDER BY 
    m."phoneNumber" asc;



SELECT 
    m."phoneNumber",
    COALESCE(SUM(array_length(array_positions(q."correct", 't'), 1)), 0) AS "correct_answers_count"
FROM 
    "wa_users_metadata" m
LEFT JOIN 
    "wa_question_responses" q 
ON 
    m."phoneNumber" = q."phoneNumber" 
AND 
    q."submissionDate" BETWEEN '2024-10-26' AND '2024-10-31'
left join "Lesson" s on q."lessonId" = s."LessonId" and s."courseId" = 95 and s."weekNumber" = 1
WHERE 
    m."targetGroup" = 'T1'
GROUP BY 
    m."phoneNumber"
ORDER BY 
    m."phoneNumber" asc;

select * from "wa_question_responses" where "phoneNumber" = '+923074523431';
select * from "Lesson" where "LessonId" = 1265;


select m."phoneNumber",q."lessonId" from "wa_users_metadata" m left join "wa_question_responses" q on m."phoneNumber" = q."phoneNumber"
left join "Lesson" l on l."LessonId" = q."lessonId" and l."courseId" = 35 and l."weekNumber" = 1 
where m."targetGroup" = 'T1' group by m."phoneNumber",q."lessonId";

select * from "wa_users_metadata" m left join "wa_question_responses" q on
m."phoneNumber" = q."phoneNumber" where m."targetGroup" = 'T1' and q."lessonId" is not null;





#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <ctype.h>

#define MAX_LINE_LENGTH 400

int count_lines(const char *filename);
void parse_activity_file(const char *filename, int *grades, int *present_ids, int *present_count, int *absent_count, int *student_ids, int total_students);
void parse_student_file(const char *filename, int **student_ids, int *total_students);
double calculate_mean(int *grades, int count);
double calculate_std_dev(int *grades, int count, double mean);
void trim_whitespace(char *str);
int is_absent(const char *str);

int main(int argc, char *argv[])
{
    int total_students;
    int *grades;
    int absent_count = 0;
    int *student_ids;
    int *present_ids;
    int present_count = 0;
    double mean = 0.0, std_dev = 0.0;

    if (argc != 3)
    {
        fprintf(stderr, "Usage: %s <students_file> <activity_file>\n", argv[0]);
        return 1;
    }

    total_students = count_lines(argv[1]) - 1;

    grades = (int *)malloc(total_students * sizeof(int));
    student_ids = (int *)malloc(total_students * sizeof(int));
    present_ids = (int *)malloc(total_students * sizeof(int));

    if (!grades || !student_ids || !present_ids)
    {
        fprintf(stderr, "Memory allocation failed.\n");
        return 1;
    }

    parse_student_file(argv[1], &student_ids, &total_students);
    parse_activity_file(argv[2], grades, present_ids, &present_count, &absent_count, student_ids, total_students);

    if (present_count > 0)
    {
        mean = calculate_mean(grades, total_students);
        std_dev = calculate_std_dev(grades, present_count, mean);
    }

    printf("total students = %d\n", total_students);
    printf("absent students = %d\n", absent_count);
    printf("grade mean = %.2f\n", mean);
    printf("grade sd = %.2f\n", std_dev);

    free(grades);
    free(student_ids);
    free(present_ids);

    return 0;
}

int count_lines(const char *filename)
{
    FILE *file;
    int lines = 0;
    char buffer[MAX_LINE_LENGTH];

    file = fopen(filename, "r");
    if (!file)
    {
        fprintf(stderr, "Error opening file: %s\n", filename);
        exit(1);
    }

    while (fgets(buffer, sizeof(buffer), file))
    {
        lines++;
    }
    fclose(file);
    return lines;
}

void parse_student_file(const char *filename, int **student_ids, int *total_students)
{
    FILE *file;
    char line[MAX_LINE_LENGTH];
    int index = 0;
    char *id;

    file = fopen(filename, "r");
    if (!file)
    {
        fprintf(stderr, "Error opening file: %s\n", filename);
        exit(1);
    }

    fgets(line, sizeof(line), file);

    while (fgets(line, sizeof(line), file))
    {
        strtok(line, "\n");
        id = strtok(line, ",");
        (*student_ids)[index] = atoi(id);
        index++;
    }

    *total_students = index;
    fclose(file);
}

void parse_activity_file(const char *filename, int *grades, int *present_ids, int *present_count, int *absent_count, int *student_ids, int total_students)
{
    FILE *file;
    char line[MAX_LINE_LENGTH];
    int index = 0;
    char *grade_str;
    char *id;
    int i = 0;

    file = fopen(filename, "r");
    if (!file)
    {
        fprintf(stderr, "Error opening file: %s\n", filename);
        exit(1);
    }

    fgets(line, sizeof(line), file);

    while (fgets(line, sizeof(line), file))
    {
        strtok(line, "\n");
        id = strtok(line, ",");
        grade_str = strtok(NULL, ",");

        trim_whitespace(grade_str);

        if (grade_str && strlen(grade_str) > 0 && !is_absent(grade_str))
        {
            grades[index] = atoi(grade_str);
            present_ids[index] = atoi(id);
            index++;
        }
    }

    *present_count = index;
    fclose(file);

    for (i = 0; i < total_students; i++)
    {
        int found = 0;
        int j = 0;
        for (j = 0; j < *present_count; j++)
        {
            if (student_ids[i] == present_ids[j])
            {
                found = 1;
                break;
            }
        }
        if (!found)
        {
            (*absent_count)++;
        }
    }
}

void trim_whitespace(char *str)
{
    char *end;

    while (isspace((unsigned char)*str))
    {
        str++;
    }

    end = str + strlen(str) - 1;
    while (end > str && isspace((unsigned char)*end))
    {
        end--;
    }

    *(end + 1) = '\0';
}

int is_absent(const char *str)
{
    return str == NULL || strlen(str) == 0;
}

double calculate_mean(int *grades, int count)
{
    double sum = 0.0;
    int i = 0;
    for (i = 0; i < count; i++)
    {
        sum += grades[i];
    }

    return sum / count;
}

double calculate_std_dev(int *grades, int count, double mean)
{
    double sum_squared_diff = 0.0;
    int i = 0;
    for (i = 0; i < count; i++)
    {
        sum_squared_diff += pow(grades[i] - mean, 2);
    }

    return sqrt(sum_squared_diff / count);
}




